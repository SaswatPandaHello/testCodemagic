# Check out https://docs.codemagic.io/yaml/building-a-react-native-app/ for more information
# Please review and update values

workflows:
    react-native-android:
        name: React Native Android
        max_build_duration: 120
        instance_type: mac_mini
        environment:
            vars:
                GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: Encrypted(...) # <-- Put encrypted CONTENTS of your Gloud crendentials file here
                PACKAGE_NAME: "YOUR_PACKAGE_NAME" # <-- Put your package name here e.g. com.domain.myapp
                CM_KEYSTORE: Encrypted(...) # <-- Put your encrypted keystore file here
                CM_KEYSTORE_PASSWORD: Encrypted(...) # <-- Put your encrypted keystore password here
                CM_KEY_ALIAS_PASSWORD: Encrypted(...) # <-- Put your encrypted keystore alias password here
                CM_KEY_ALIAS_USERNAME: Encrypted(...) # <-- Put your encrypted keystore alias username here 
            node: latest
        triggering:
            events:
                - push
                - tag
                - pull_request
            branch_patterns:
                - pattern: develop
                  include: true
                  source: true
        scripts:
            - name: Install npm dependencies
              script: |
                npm install
            - name: Set Android SDK location
              script: |
                echo "sdk.dir=$ANDROID_SDK_ROOT" > "$FCI_BUILD_DIR/android/local.properties"
            - name: Set up keystore
              script: |
                    echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
                    cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
                    storePassword=$CM_KEYSTORE_PASSWORD
                    keyPassword=$CM_KEY_ALIAS_PASSWORD
                    keyAlias=$CM_KEY_ALIAS_USERNAME
                    storeFile=/tmp/keystore.keystore
                    EOF               
            - name: Build Android release
              script: |
                # Set environment variable so it can be used to increment build number in android/app/build.gradle
                # Note that tracks can be specified when retrieving latest build number from Google Play, for example:
                # export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks=alpha) + 1))
                export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME") + 1))
                cd android && ./gradlew assembleRelease
        artifacts:
            - android/app/build/outputs/**/*.apk
        publishing:
            # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
            email:
                recipients:
                    - user_1@example.com
                    - user_2@example.com
                notify:
                  success: true     # To not receive a notification when a build succeeds
                  failure: false    # To not receive a notification when a build fails
            slack: 
              # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
              channel: '#channel-name'
              notify_on_build_start: true   # To receive a notification when a build starts
              notify:
                success: true               # To not receive a notification when a build succeeds
                failure: false              # To not receive a notification when a build fails
            google_play:
              # See the following link for information regarding publishing to Google Play - https://docs.codemagic.io/publishing-yaml/distribution/#google-play
              credentials: Encrypted(...) # <-- Put your encrypted google-services.json here
              track: alpha
    react-native-ios:
        name: React Native iOS
        max_build_duration: 120
        instance_type: mac_mini
        environment:
            vars:
                # Env vars for automatic iOS code signing
                # See the following link for more details - https://docs.codemagic.io/code-signing-yaml/signing-ios/
                XCODE_WORKSPACE: "TESTING.xcworkspace" # <-- Put the name of your Xcode workspace here
                CM_CERTIFICATE: Z0FBQUFBQmhKMGRiaWhLSVlVLXhkc0ZlcmpiZFZCYWp5WGxHdW1wcDA1c1V1ZUxYTVFUTGlfdEU3ZGlPOGVuMGVHb2lLS283clYxVFBTQzNuTU04R2lWTERRUnkzeVFDM1ZfLW5vN19IblBlUE1FYmRtclZ0VFc2cEJ4amtDZWVJWDdTbVVWMVN2NnNUMW1jYTVkWS0zTXdORUg4dU9WUHpkQXZ3aG9ZY0NfRmJPNlZTX2o2RW9KUGpBdTBSNFdPT0ZwMUdoVndreXBhMC10cTYwek5IUU1vYmlleF9YcnhaUEk1c3hPUXk5ZlRoQW50NDNhZEtvS1BteXpzal9jWExhNE9HVWltSGxtZjV5Z01MQWZUSTBndHFUWHk3cHZuSmRhamZndFFEN0M0emljZ09YZ3lfT1BlaUJsOHE3VE9MY05YTDNEQm55blR3OXBRT2FURG9zelJES0dBZk5nUGUzM1puUVp3RnVsQ0swQXhjdXk3SWliNW1rWk5TN09GcHQydlF3WUxubWVfOWdudEJ1SFhwVFNhdVU2S1hEeTlEYjdaUjZHOHU5MmJfSFJPU3djZ0pZUlNwbURiTWNHMlhhVDhnZGJlckdkR2FpUUktQWZVeXNUdG5QQXlmZWd6d2l6QjBZbkVoZmZscXF6NERPMUI1Mmp5S1gxUTNWMFhhakZFM1VmN2tXTlhBRVlTb2Nxc2k0VU5nczBVWkJaazBMcDMtcjNHaEQ4QXNPdnlCYVdRNFpCYUxxTzlBNzFsX1kwbGw3QXhJcGVDd2YzRGdldlZSSjZyX3ZlcTdad2RUNzMxTlB0ai1Vek1EZDBpdFhIX0pTckVtNGFxSW5FNTNsNWVFaEZzVUNFOHYyYWw5Y3VfejdXUGlVWlhDVE12LXJ0dkFIWGNjcGVONTF3Nm9DMVRRekQ0OXFQOF8wTUtQV3NaQVBaYTAzTHJtX2R0UVl4WGxxazVWOUNhUndJSThjR0RidFFWV2hiNUxhUWdTNzdrNk5EUDAyTlhnQ25JX0pHaTZvclREU3oxMVd4QUhabXNSdmU5SzhDbTNqTk9yWHFaUV8wa295UWNEbHhuU1lLYmpjQzV0U2V6Yl9xVnliTnVTLTRNdnpBeloybGhMVWhxYkpnTTdZS09OSFk3YnRQTS1GdXhpWVAteVlCRXdDZG4zRzM0VHUtN2I0MmJZc241TlU5YXY4NkFKN3MzWTN0eGt3ckdOVlRWT0x0VzA3aU41Nm16bzVjQTNXVERndldZVXRXSVVGUFlRcG1yeG1XS1JyNXkwa2NEemE3dXFIbnhtZ3o3LURlWnpnWmZ0cmdoYTlRbXI0WFE5Rk0xZGZYM0NNb0wteTFta2MybE1jVWs1dlFoOEJrWVhtQjVYT1YzRm9mcTBua24wMElmR1A2Sks5UE02LWx4Rjk3b2hnaWYyZ1NQVXJrODJfZzlQT09SMWdLOG54bG1sNnRNWmtpQTNRTGRkZW5QVDhtUzAxc1lwdmswTWRoazk3Y0NaTkRiLVFvMVlFdEs0d3ZXanVJeE42R3F0d1pGVUdsbGlWdzdHQlNTclk5VEpkRHBiTEE1WTU1VEdwd21ucXU0TDA3VUNWd3hSd3FwY3RHTGJLNjlMYUpGNFhoWi1KU3MwUkM1enMzMllZVlRSa0VISDZhMzdPd2l2UGhndENwU2cyRDlpT1lmaTh5VGNyNzZtM3RMLXRpSENCaGRyMEFfc3l1YUJOaHNLVmhmSVFCSmc2V1NWbXJGdWFrdkljZEJtSGR3U21fa29YaDdhdDMxNnoxXzVObEU1TTVPQzE0cXAtLUlDcUNqZ0x4cmF0MUlnekdHZnBMMzg2U1dGSXh4MmJwa0RNUW50WHNyWDJjQnJ6ZDI3TjdNcF9sdEUyejVJRTJxTXJhd2lSWWRUNWpDN1AtdTR2d2s0LUYtbU9HdEpTZVJLSXBfV2p0ZDBGUXF5UVVoZnVxZHhpUndVUGhMSElkeGRnRXZ5UGxiRHFzSjdHc0NlSW5GeXVyZ2RlWngxZ3l0STJwLVNBNnhTNF9oWjNubl9NTTNINUVHNmMwNUhqWUNzZEZQZXMzblYyOTVBNmh6QmJxbEtfdnJuREVBSzdkQ1h4Zmh1SjNTMjhvelBaOEI0N0MtSS1yckF5WW9nNTB3TkNIcTVxeW1ybkZIbWVlSkJEOGNrcTU4MVRoOGIxbjNZMDBzZUpkbDk5UXdEUTBmRm1vYTBkcEkyZVlnLUtFUlhxSWkwcWNERVIzQUdGQjNvakFsR21zT3A5SF85Q3ZrRWVGTHNhd3BqMnlnN19mTlJlMXpZQ0FNRGwtYnQ2aEFETy1lRFNkS2wwMUloWDg2MHItNzVqRU5mYmlZdEZIR1RNZW0tTW1yRW5pank5eWNrb2JoTFpWVU96NzUwSTlsMW5acnR5LUVvXzlYS0FpMjQyZFRMTFgydDdDeVd4Mk9sS0pBWDF0RTBzaWdVSXJuMmQ0SHdnX2VKbk1waGExMU9saDVUZnkwOTVOYTJ5VlNBTlV6bmlYY2daMGRGR1VnU3g3MmtPOFhNVWk0THhDZDkyQTNuQWxHTElKY0gtNkFhOXhWYnZENFN3RXloNGU1aUNJWEUzX1hfbUtSQUhhWWZaLWV5RTR6NmxmaW9KYUREYXdqUUFzLV9QbWsyRTA5Z2k1dkpTbEY3enRTZldsMDR2V19ac044alpmZEgzNU5vRHBFYjBTZE5TOUdIOGJWdUxGcF9uZXBzQW05d3JmclVIbURSb2dxY1NhRDVLVTBFaDU5RkJYOXVlQ1FoN1BsQmhnRGdxLUd6akY2UHNnZGVNNUh6eFJST2hjT1RWaUxQVGtrczZyRVJTWGpVVlNMaW1IRDlYb2h1YWhiNDkxUXpBcHkzdTBYYzVPSlhHeHdJRFU4MnplWGFjYUFGZy1QaVRQdlZadFBWYXdKWHNMdDQ2MXpFNTZiSlVCRHBEMzBiWlBNWVJaUURVVTlFTUhCODVmM3V5VTZaLVFldUgwRU9rVndiM2E4MnRpQ2NzdHBOLXVyVEtDd3FPeERpTWRxNGstMHoxb3p6R1lBeDVyQ2VyaWZRUVQxaEdGMTB2MkZMWHQ2d05ldWJxMWt0TkpnRExmeXRHVEdpdk9xRGprT1NKaER0a1FZT2JJN1hFclZrdEd6VWRvR2Y5V0dXaWFCOG1Rc2JlallVWTdLT25QTERTUFN3SmxHVlg5YmgtRGxTNDh3NXFyd2dKZ3hDZFk4ejlrYndoZWRYWTJJdDN6ejVFbWJzcjFOZERnZ1FCNjZiUDB6OHA2YmJXVkxlT1RtbUxNbnB5U3l5MHJoVVdvb1JzNzR6ZUZhTkJ4VFBuR0hvTmVuTjk3X0szR1Q1ZHdSZW0tdDV1WnRBWXBMbWtXbS1PN2hTOHdHbUVGamxCTU00RjM2VGlRMVYxQXJfWUxFLWNNd0sxM3dfb1RwU1VGalZBeWZZVUFaUEN2Zkh6MnpKV1pJNkhhOEh5d2FQa2lBM2ZCczJLMDRtaDJfTUF4V3BjWWYtVlVrck9xd1NwTS1ha3ZtMHZHY1ZabkU3dkxMeHg4aGw0MHdOcFpQYTFHWDVWZ2FVU2RVU2xPd2gtc0VZOVlmTlA3NF9mNVlqVlhZLWJaWFRmNlhDTDg0RmxhVlYzby1lRkZCUUFCTnJDN1VVM0ZPakR5MFBKU3E4ZzhEREd1Z0ZybldERzk4cUN6Q25mNEcwUENpeU9lcXV6eDFBdS1rb3JHb1BOWEV4eV9jbG1DMXNqWWxSRW1pLXNSeG9xRHlKVmo2cGZJZzFYRkw1UG5KYW5nY2FYWWVmbTNFYnpxZUp4enNLNFhfeW1EMWRGeVJlbmdmS1Jqb2diRW9tTWZnY0IyY1dTWFd0Mzdxd3ZkcW5qdEt1UW8yWV9EQ1ZxQkhObnMzdFc0OTBTSXNpeWtaV0lRVkdxNGRwbHE2Y0VtQzh4bGdsU3V5bERJZ2RtZmxlZGVRM0lqcG9LNnRkU0dCZ2ZhR0p2b1FBRE1aSHlCUDFHSGhWOHdpemNWZXU0UlhUZnc0UkJQc0xpQ3BjdHduWjdxNEtwVF9IU2NpTmNuR0k4UGdfZTluUzMwWnl6R2JfWDRPM2xqQ1Q5dXUxTkdlbjFjUnphcEpfZE9YdnRzbnFRbnpJMEk0Q25tQzF0TEdxRzk5U2dHbzU5bERfNklRdk1RVFRVaXhNVTlIT0Z1TVg3MC0xSzlDOThxdzBRUkJOc25GUEFlWWxOb1dLMzJ6UUZtUlpNWHNidXNZOHZUVTF6Sk0xUERVUlZMSld6eTBlOTNPSDU5RDVOYmdVQktrUDZVWWdHUU5OR2ZLakppelpENFlvR25QRjlKd0MxWVRUd3R5YzNhOF8wQkMwVHU5bk9WU3Vja0tkeHJrVEI1NkJKYU1MUXRZa0lBbXFQM2E2RDdxZFExWVhTZW1jQTZjenFsSnRraGRvS1U1VWVyS3pBVVpLVDQ3WGlOdF9UdFEwTFZPTi1FQ1FibVdXb3ZKandmZzJqdnUzVnV6bUNNN25OaVppd0QtakU2RmtTSDBxN19hbE1ldmtmY2pPREtzRmQ5U1E1SC1sbEd0eXAxYTRTMHpnVTZ1MkV5Y21XZ1VHY0RZbl9lS1p4UXJJTGViOUZ2UkFuRW1DMmdyclpZLWJKNW5WaHo3dldmNFBtdElJQ1luLUgtSXdTN0RCdy1vN01WSFB5eTBXYU5nOUFwM1Z2RGhOWDdOd3dzMm1yZTBvN1NWY2szV3FjYlVHUlphd0FURmU4bDMtOWdkZFdTbk5kS2ZPTHhHTUpDWm1wMXZQb1JXcEg5OHR2SVZ1RUkxODgxY08zQTY1Tk5YYmJQS0FMZXBDZnJLUHFhVTRIXzVfbVJsS1dqT19nZU9PYWZrbmphcDFwbEJiYlIwUUwzX0I0LXRGLXIwT3E1TS0yVkRPUmFJZnotclF5Sl8xajlBSnRpRng2MnNvcG5SZ2ExUFhFaEQxdDZmaFJnMjUyaFdQenAxeG01d2QydHBxLUIwUi14OHRiZy1sOWVTS1Z3bnNUTjVGUmF1NldoN3BpcHRUeHVRSkdwR0t0NDJfZVhQWDczSjJPMWRoMnIwWl8wdVJkcVExaV9rVWVwS3JUWnFKOVBoZkxzRzFVbk9OOEt2aVRYNXNvcklRWDh0QWttLTdWeUpBbHY5YXY4UkM2aXBzdXFFbmRxX0RYejYxMWFFQ2ZZeGdRNG96cmh4bTRtN2RHeWpuSzVsVnRIVWUxRy1xckpSdWwtSnVHUmF1NHlFVzItYXc4ZVIxdmh4dHZZZEd0b0wzNE5LRDY4bjI5ZDRrQXc2SkFaN0kyLTRtbFZWcldZcnA4SUpiT2M0cDNRUjZDMVZ4S0FPLTNzRGdHTzlTNVhxOVpaMWg0OHhmQVNhRjhaNHJ3Ml82eVZGQXM1MUltX2dKR1owUFVfYy15RW10ckRQVV9RanFfYV82eFA0STg3NVZVQ2tQWnBVZXZuNHQxRWU3bER3R3JDU25iX19FbWhJQS1PazBXblFtelYxT2lHZlBOS08zSlVaOXYyMF94cnVkLV9oZGo4aVlXbW45akRwMTE1cmxCTmNjVG82aTV4bTR3OHpUeEdDa0taaXp3a24yYnhKSlA4Q284bEFFalhZNlNDQXJTY0JMR3ZHQnJ0dTFUQzVlZTZLSVdSQXQ1U1FNX3o1WHdoblhWc0VhaGVxY1BtT2p3Ty1vd0NyMHFPYlhKME13UW8tbm1xc3MxTXVDaGNxSmpmWGtfc0kxSTJLbGJQcUtlSGdGWFdxOWZtelNIQS1KX1NObFd5eW1aMjBhbnlyd1NRVldheUgtTm94LUpmRVVnWHZzVTl1dVNUMTBmRDRTeVJPbjZwZXhNZDlDLXFVVzNKNGpDUzI2SGQzcFo0RFVhbGNBOHAtajl3ZkJWaXZZNFViMlhpcGl2R3RFQ1k2M0FsSzdXcU51a182MldkWjdfb0g0OWM5OG05eW9CTkJEZmVGZ0dRRzdrdkdRTnRSVTMwUkp0VjVYNlZkaHlOeDFMQU51cXFGRzkwWHJYWHROQnZ1dUVmc05xdWZURHhSSFJoZGVFTzduWFZ5YTE0dEtxWWwwZ1hVVS1wWUpzTTYyQ2IybmZnVVlJLTlZUkJOWkI5dUtkM1BOclBsZzNVSFFXUXJUZGFoQlFCWXVKSjZ3Rk1kemIxN2d4emxJLUFDU2FzeHBPaGRhVXpMSjlMQmpXd2l3TFpEcHN0RThCcTdKRE5jNnIzVjc5WWtiQl9GaUxxblNiaTdxWEdiQmlXTEQ1UnFWTEVTUHFrMllPbDl4RkpXRmhBMEZQVDNZbnhzQWF2eFNSVDdHa0o3aTk3TDhjVHUzYll6M0pCWTdwT1JJcDFXQk5NWnZyWmFPUTlFbWc4dXJjWUtncmQyZ3AyUTNIWEZLaEEyc0lkTzFsVFFobjAzbVhUeFZkSWF6U3RVMFlEMl85bjFZRzRnbGVBZ2ZfT3VCTDJCNnpPdlByMXRZVU13eDg5ZzZfOThjbF9MWGNQR1BxTF96UHhSZ0JiZUJJQnNvTkx5c2hkUjExal9ORzZaOWtNdkR2UExoa0V6MW1HNmM5RHlSNXh3aTc5WWYyd29POV9sUTlTS05yWEdjZEVaTkNCNFBCZGVnVnFLLXI3ZFZfNXJyTUF4emNoVUptcUFMR29LNmNnTVJtVEhJTENmZ3VXbEhtcUxHYTNqcWVzOERFNGx3aEFDY05lbUZubmFNR0tyWUJhWjdyUXZscGk5dGh5TXh3VnRxYXczODBLMk1URVlmaDg5LXBqYlFSR3NmRzFlY1V6OTdfVFNmNGVLSFQyNFZUdnlDUzlUWVB4RmlFT0lienVYT2ttU0NxR2NlTEUxT21MaW1tcnB6LVVNNzg1NFM5M2VqMGlLZHZUT1VLemhBUnlYdlVmVEEwOTQ4UkRLNkRxUWpMUjJGUlY3QjBZYXJmMFhYYlZUZkZsQ09lM1NBYWRhZmRSem9TdjJremhteDJwNjFuRUkxTjRXUEtpUUN1STBIaGptVXozbmFxNVRuSnF3SXl3NnFiR0dCazlIbzJ4REdydVdqWERVUWRON1c1RXVSNHd3LVlGYUctUkNROTluWE0zNHhpRTlkZFJMR1JfaWZwbkFubnE4clFNU1A3MHE2UkxoN3B6OFp5WmJtd1FHeXdTMExNSUpIbXZiUndXS1RPRS14Nk5jM0NXeXo3R0dvVmlTQy1CZW5iVXRjVzdDVEJ3OWFXOFhqSkhPOXI5UlhvMENTR1MwOTcwQzZXQ2tKZl9QelRpZ1FSNHJrN29pWW5WMVRDSjFHTDdkVURDbHdWcnZ3VUVqWVdpNXVveWNWZF9wNm8tUXprOXUyRzhySlItWGdvTEVNOVNNdWI3X3RweldPTzF4dTdrYWdKdXJza05sa0g5Y0ZDVG1UZ3RIWEJrZ3hDYjh1N0VUa0JncHdhX1dZOGlfN2NCRUM4YmxqY2p0RWVqNHczM0lkSUtyN2dhdldnSnJZcHJYRnBFYlFmV1BQbDZONGpfOWp2ZkxoVlRIOGZQbGNkSzhpS3hqQWY5QURrRk1DR0RBRUZuSUxWaXlWdEszUG4wQzBXQmtvbVNvUV9FeFJxbVNkTUs2TVM0NHNnNDI4d09GMlgtSkxTWXpaMTI4TjZVdTdPcl9HWHd6RHFkeEV4Wm1vNkpwS0ZOeVh0SVhPNU54bGNMczZZcm5KR1VNdDhocHVpZmwzR0JpUWx1Zk1rMD0= # <-- Put your encrypted distribution certificate here. 
                CM_CERTIFICATE_PASSWORD: Z0FBQUFBQmhKMUFYNHI2M3BGVFVPdmd3aHM5MGxDUnM0UGl4b3BJbFdvTDRPUTdwa0tiUXMzWVRoZExzSGd6cW5PZGxjdFFjcENVVG1namVDQUFDV1dfdUlTd3pjdGIxM1E9PQ==
                CM_PROVISIONING_PROFILE: 
            node: latest
            xcode: 12.5
            cocoapods: default
        triggering:
            events:
                - push
                - tag
                - pull_request
            branch_patterns:
                - pattern: develop
                  include: true
                  source: true
        scripts:
            - name: Install npm dependencies
              script: |
                npm install
            - name: Install CocoaPods dependencies
              script: |
                cd ios && pod install
            - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
              script: |
                keychain initialize
            #- name: Fetch signing files
            #  script: |
            #    # For information about Codemagic CLI commands visit: https://github.com/codemagic-ci-cd/cli-tools/blob/master/docs/app-store-connect/README.md
            #    # For details about the --type paramater below - https://github.com/codemagic-ci-cd/cli-tools/blob/master/docs/app-store-connect/fetch-signing-files.md#--typeios_app_adhoc--ios_app_development--ios_app_inhouse--ios_app_store--mac_app_development--mac_app_direct--mac_app_store--mac_catalyst_app_development--mac_catalyst_app_direct--mac_catalyst_app_store--tvos_app_adhoc--tvos_app_development--tvos_app_inhouse--tvos_app_store
            #    app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
            - name: set up provisioning profiles
              script: |
                 PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
                 mkdir -p "$PROFILES_HOME"
                 PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
                 echo ${CM_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
                 echo "Saved provisioning profile $PROFILE_PATH"   
                 
            - name: Add signing certificate to keychain
              script: |
                 echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
                 keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD                   
            #- name: Use system default keychain
            #  script: |
            #    keychain add-certificates
            - name: Increment build number
              script: |
                #!/bin/sh
                set -e
                set -x
                cd $FCI_BUILD_DIR/ios
                # agvtool new-version -all $(($BUILD_NUMBER + 1))
                agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APP_ID") + 1))
            - name: Set up code signing settings on Xcode project
              script: |
                xcode-project use-profiles
            - name: Build ipa for distribution
              script: |
                xcode-project build-ipa --workspace "$XCODE_WORKSPACE"  
        artifacts:
            - build/ios/ipa/*.ipa
            - /tmp/xcodebuild_logs/*.log
            - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
            - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
        #publishing:
          # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
        #  email:
        #    recipients:
        #      - user_1@example.com
        #      - user_2@example.com
        #    notify:
        #      success: true     # To not receive a notification when a build succeeds
        #      failure: false    # To not receive a notification when a build fails
        #  slack: 
        #    # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
        #    channel: '#channel-name'
        #    notify_on_build_start: true   # To receive a notification when a build starts
        #    notify:
        #      success: true               # To not receive a notification when a build succeeds
        #      failure: false              # To not receive a notification when a build fails
        #  app_store_connect:                 
        #      apple_id: $APPLE_ID
        #      password: $APP_SPECIFIC_PASSWORD
    
