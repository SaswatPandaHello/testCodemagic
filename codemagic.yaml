# Check out https://docs.codemagic.io/yaml/building-a-react-native-app/ for more information
# Please review and update values

workflows:
    react-native-android:
        name: React Native Android
        max_build_duration: 120
        instance_type: mac_mini
        environment:
            vars:
                GCLOUD_SERVICE_ACCOUNT_CREDENTIALS: Encrypted(...) # <-- Put encrypted CONTENTS of your Gloud crendentials file here
                PACKAGE_NAME: "YOUR_PACKAGE_NAME" # <-- Put your package name here e.g. com.domain.myapp
                CM_KEYSTORE: Encrypted(...) # <-- Put your encrypted keystore file here
                CM_KEYSTORE_PASSWORD: Encrypted(...) # <-- Put your encrypted keystore password here
                CM_KEY_ALIAS_PASSWORD: Encrypted(...) # <-- Put your encrypted keystore alias password here
                CM_KEY_ALIAS_USERNAME: Encrypted(...) # <-- Put your encrypted keystore alias username here 
            node: latest
        triggering:
            events:
                - push
                - tag
                - pull_request
            branch_patterns:
                - pattern: develop
                  include: true
                  source: true
        scripts:
            - name: Install npm dependencies
              script: |
                npm install
            - name: Set Android SDK location
              script: |
                echo "sdk.dir=$ANDROID_SDK_ROOT" > "$FCI_BUILD_DIR/android/local.properties"
            - name: Set up keystore
              script: |
                    echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
                    cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
                    storePassword=$CM_KEYSTORE_PASSWORD
                    keyPassword=$CM_KEY_ALIAS_PASSWORD
                    keyAlias=$CM_KEY_ALIAS_USERNAME
                    storeFile=/tmp/keystore.keystore
                    EOF               
            - name: Build Android release
              script: |
                # Set environment variable so it can be used to increment build number in android/app/build.gradle
                # Note that tracks can be specified when retrieving latest build number from Google Play, for example:
                # export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks=alpha) + 1))
                export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME") + 1))
                cd android && ./gradlew assembleRelease
        artifacts:
            - android/app/build/outputs/**/*.apk
        publishing:
            # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
            email:
                recipients:
                    - user_1@example.com
                    - user_2@example.com
                notify:
                  success: true     # To not receive a notification when a build succeeds
                  failure: false    # To not receive a notification when a build fails
            slack: 
              # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
              channel: '#channel-name'
              notify_on_build_start: true   # To receive a notification when a build starts
              notify:
                success: true               # To not receive a notification when a build succeeds
                failure: false              # To not receive a notification when a build fails
            google_play:
              # See the following link for information regarding publishing to Google Play - https://docs.codemagic.io/publishing-yaml/distribution/#google-play
              credentials: Encrypted(...) # <-- Put your encrypted google-services.json here
              track: alpha
    react-native-ios:
        name: React Native iOS
        max_build_duration: 120
        instance_type: mac_mini
        environment:
            vars:
                # Env vars for automatic iOS code signing
                # See the following link for more details - https://docs.codemagic.io/code-signing-yaml/signing-ios/
                XCODE_WORKSPACE: "TESTING.xcworkspace" # <-- Put the name of your Xcode workspace here
                CM_CERTIFICATE: Encrypted(Z0FBQUFBQmhLSk5leGs1Z1hsMWh0T2o0X0d6VFJmWjZHaVdKWjBxT190Q3M0a3BzQTJhcExQd2JSWDBtejN4Yy1lZjNOZVJULUVmcThWYXRYSXg5QUxwTTdPU3dUcnI3QkRWZlZPVFVYQVZrYWRXWHJqbGllMUkzRDRmOXZnTFpaNGpLbDZvU3dtY0FsUGpQUUdMTUJoTm83QTd1aWlZSXZVckNic3BJcmYtb2V4akdSVWVzNmUtNEh6NW5KY0Nka2dTdTZpMWw2cXkyRjViMm8wcnU2a3ctdWt5aUptMHhWb2Z1OXR4YU1TcGxvNTJwYWJBZWNqUUY4VzRHZHo0OC1xTHdlWDh2bXhPWjh5aEM5c01lQUp5azJkYkxyVFZnNU43STJWQXpRVFYwQzlyd2NEakR1LUMxZUw0cVRrbVRFWktGY2EwREFVazEwOHNsQVZZUEt4NExVWDItd2QzdkVUNVhNSGUtUXZLMVcyUjEwZjBSSllSanE5RFJqWFJfRldEeHlwNmFVTENyRUhsS01UMmhONWxuOGU1Vld4Tnl1eU00UE44Y292MDEtV0lFNHdhYVRFbldsejN5RWt1d2xUUnl2alRQVGhLQnVDdkIxUWFMbHVRY1VNaE1MZW9ZckJlNE1sdzBERURwSVVwbUFaRlI4UnFHRk90NkZjYXkxaEptNUhJY0dJU3dqVy15S1dkQkRkOFpOZk5qb2JPM1pDYnNSZU1uZ1Zydm9ESzhfcjBaMElKVlZlcVFmVDJqbzFtVkRzQjE2Q19aNUpyTjNZbHI4b0NJY3ZrTVg4SjdPOENxa2RETFg0Y3F4NVF6TXBEUzdIY1BMSGJacGNfTWhfSXU3c3E5M05USVVoZE1sSlhuVEhqdXJobmJUYnhVSkp1dzhYU19wZFEzNVVUbXNqLThFZmlIZlgxOXd5bVNOWERxNUpDaUJyWlMwS3lsT1lHLWVfVVZfUF81ZFdhRnFpVC1lUnVyblVxTXY5dDI0Q09WOVBjRGplem44UWRVb0NnQ3k0RG9yWVVhUExKNkM3N2JrS1UtRkowNDdXVVlMT3pZeEY3SWxieHNkeDNpMk9iVzFIV1Bmc05SQ2tTT2FBUXdwS2dSRlU0eUs1RS1nZGVsRVBVYzBNZXdxZFBKZVFfU21TNWY5N29KdGk4Mkt4eE5MNEZWZ2RrbjhaLWZ6dThFOFdNV0pJVWZ1Y29OWFZISWNWUGdWYnBWOEpycU1qQmU5bFN5YWFNQ0VHMWV1Y0pOS1dnalpxd2tLM2JjNVp2RldNRWtiMTRqc0ZlUGNhdDVXQnl3RGxYZldUTHJMM1l0TmM0SE5OQ3ZmVUNOWVpfLTR5cXB2UnNoRm53cVFYSHpKbzVZb0FnMU1DNFVUNTV1cFZyX0JVbXZJTmRscjRVbkZmc3cwazZ4QWxUMmJJcDlVWF92RWh4MTFaSHNpTVdaM2FJTjVOSFdUQWFKaGJ3Mnp4WVFoR0hMQVBEVW5wdUVvTm1tOVl0VGEwR181WWxrZllNeGZ1b3FMY2JoTlV6YjRvLWN5VFJkRnhySmplVHVuVkdnMktYblRfMFc3ZGhhcnNoc0FKU2lVZy05bWxRTldaTnB2YWkyZU0zMGdab0RDdGNSYnl4NzYzd0swU082N0IyRk5JUXkzbXlCNG95VlZLSTlLb0M3dUZaUVdwMTYwamx3MjZ5eHNwQXJJZll0WG0xQWduTVZPZUQ2c184RE0wTloyWHljMldrQ0ZWd0V3d2F0aUNKX1VRM3RvYkdTTW1SMXJIODFBNGp3TEJBb3ltenFZTFR0LTR5MC1rMUFIWGRETEhrTTJzYlJBTXhEY3hOS1NSUXBwbFRaQ1Vfb1g2eE5kNVhBeVdOZXZGa3lpQzd1VlFoTHltNng1dTM4N0phSWRLWnN4Vm8yZ3E1NFV6MDQ2QmdCZzFGSFp0c1pSaXU3amRYd3ZVbTcxbVFrUmNFNEphWlJXQmJzVjVrc25yXzdZTXF2OGl1ZDNwV3FSZDk2b1hZclNsclAtWHFHWDlrblVUQlV1cDYybGZDQU5BZ1g3S2ZqRXhxQ0hkcXRHYnFxRUhrRmxzQ05TR3c0Y1NnU1JiNE5vWW5OX0dEMk1fSkRnZmltT2pTT0VUTktTVC1KOEI0ZmpQN1FUeWxlc1NKUW5jeTlZM3BrRVlEQndNSS1pWGlzV3ltXzRweUJrTWYwUDh5MW1HRWh6aksyaEhkLXV1NGkzVXJONTFzUk01bjhJeHZZZlc2dVBGZmNTcHlUT2VFeTVCcXBkUmlHOEFvNzE3QWVzWTFCZW5NTThBMHFhbUZxXzdYTS02a2tINVl5R0w4b2ZFUkMzcGIxZWpIcGVoMVg5MGNSZVFUUTgxWWV6b3dLY0RYcXAyQUN5TUxXM3pTUU1ER0p1dWQzdnl5Vzk2Q3k4R2padXR3aGNjMjBqZWpOT3BTVXVfUlhSM0ZoQUw0LUM5c3BlRlEyd3Fab2RSY0dCWTVBZk1hUzFMZ0ZfMDlSa2pxS0pTYUV3ZUs0ODQ5aHd6bGNZX01vSzhMUl9nalM5TDlZcnBCV1hyUzFYMTg0TzI5OXdFOHNyeGtpVlZVRU9vdVZNMnRpS2c1amVDdkJ2ZGJlc2dyN0RsSlh2dEk1LUpHY2RnbktSY1RuRlcxa09McFNEYlpjdWxIYVpRR0FwTE02WEFwR2ZCYXFJd2lFam1JYm56UGRPZDViMzdYbm1ZN3lxZ1d5TUxSMDdyb2NpYWZaQVlMVHdqZWRZWFJIZnRmY096NndTRktrb0RtajhWQ3NWZk9WR0pGVGJVQ2FISkZVcVdKY0VCdVhvdHljZ2R5OFV0eTJvclpKdEFDcU9ncmJ2YWk4MEJiVHRmS0toRzMtNUlMZHFUamZNVVp4RHZxOE5sNU9yWE01c0FEdEVpSUYtRExxZThJMjFqQWZ5bTRpb0xlcmVKYUNzMk5YdXN6S3dsc3FQdWVxNkdRQ1hrVGptRUtabS05ZmxULWFnSjdiN3g2UWIyamVqYVZsZkhaU0V3VFI0UHFpSE51S0JCUkZteksxS1RMNHcyV1Z0OEcyMUJPMUZ1OHRfN1VYeDRmRDhzS09oMEZnVThwS2VJSVVXYXZMc2QwMkZ2cTdncWZWcC1wUmtyNk1JY2hFYTFhRmV0N3FaTFhUcjU5bXpvdU04M0VhX0Z3V1BLNUZlZ2lNRzVTbWRtQ0dkcG5icDE1ZFV2T0VoenVVRHZqNUtScHR6UnBJXzFBN0FUMU4tS0dxM21CQXRlY1c3OEd6VHdMVHRFSGkzd3d6NkdzbmJZUkF0ZWVVQkc4ejVkY192SU05b212RU1ENjd5TjcyWW52U082dVVKM2pUckVPZDdfRlJrZkZuZG5yOHZ2YVlSZGZQOHNFaU5qMnh1eWFRUEZIaGl1UmE3cDB5X0dMQTBmd3hDMFF5Q2QxbjJ2blB6d0tRX1JCZFhCUlhEcUZhVEllNnNuMEk5Ym4zUHRSVmJIelczbWJmVmZwb1ozck43SWIwczNfMG1mRDlpWFRTZ1hSU0RNNkxtYk8zQUFfd05DaEdzaG5XNkpBQ012TDNnR0RQcDFZc1VGcDdZY2NXcW1ydjA0aVlYMkQxajhLZWcxMFppRjYyT3JSMkt5NWFvdU5mRURnZzkzQTFQVFRrWHNkMUxKUTF0LTM1cks1cVhaYW9qNzRkOWpjTWRKWlRsMVl0NWx3OUNleHZvMVlFQlRSQVlic01JSlRlZk5zVjhNOHBfa2tFelNlRE5jMkdBQ3F1Sjd5VThuWTBRcmFGSHB2UGhtY2h2dGVqb042NUFZc0ZXendycEFlVUVHNF9IcmtVOXN0aUdDcXpUR1I4a3pUX2hVSUtPY3FVNDM0R1ZjWG51NzltZXQ1YkxZX1JyM1YwQUNhbGpYcFI0SXQ0dElTd2dFYjloMUloZHdNZHI2NEZGQzgySVFqcTJISGNQNFdZU2FReXZSSk1rNE1MRW93VFBvVkFaRU9qNnZFMEZ2WGkwNWYxcm9aRkVDMVFGSEQzLXlpUGwybnVNZmQtOUdpRzdJelpnd1pfaVl4dkRURGFVdlhhTndMeU5vRWpGQXNnNHF6QWRiY0hVLV80SGxZRHhjRE1kYkRCdmhKY09FQm5MN1hoZ3JRVV9fTlFjQ3RRR1ptMmk2OERqVnF0azZCOGxEWHMxWElFdmFmMHNrWXhab0tzWGJ2NERvZ3llZ0dqUjhtb0JHZUhqSU93d2lfb202YmdFZ2xFWlhjeUl6b0RYQmx5THRlZGlMV1dYMDdsbnhJN1FhY1BrVHZaS2ZNRFJLYXAzMHNFZ3ZFQjl5V3VqbFg2aVFfT2JYVktBeVZpRGpVTWVOQkNSNHdYbjk1dVhlTVFaTUx5YTZSSUFyeUdtVVVMaHVSb2NIR191aE93NVY4b1NmRU9zZmktSzZxVWhBOHdsZElscWZheEpEdl91cjMxS2tTakVyb0NRTGNKdnhFRjJsMnhOYVNqNGpta1FRRXlZR1BwUjJjalJlRWRNUzJSN2Q5UnZ1b1RpVmIyTXZJcllHN0JXUEZxQVlDSlRENk14Ri1WdXEtYk5GM1lpOEUxQkkyQ3BaMEJubkNDU0swQTZMSllvWnZyVUVCTjNCSHN2Y3dCR0RSVW1MN1QwUm9laGlsVXk2dXpFM2g3czlqZ1c4YmJMemoySy03OElmY0I5cHpCM2lOa3Q3S0xQVm9ZbEJiajVacUt0OERLRFUzaGVVODI1V1RvS2JibFlpaUpmRUFCZFF1V2VGUmFGcExRWmxkaDJnemp1Zll2cTZ0Ylp6Sngtc0kwY1ZIT1Z1akdsOGg4Z1pnTGJ2MlhVWGNIQURnVjVJY2stb0N2bnpfOVhPVzczVl84VkxhUS1Fenh4UGt1LVdUbmtDNDJobHJHeXU0UEwzVkg5Z0ZTd2hxSnY3UTZrNldpODQwSHlYajhJSU5hc2w5YS1JNXlQdEVEWjVqMTBoWGwwUzVZUzBFWHVraXZLWEk1RjhndFktdW5yMHF1RFdhaTZXQjlfNkhMQXA4UjhaZFJrVUNFT240U1ZsaEVpaUVaZEZzV0pnRzdhZmRjVU1Pdk1vakY1QWN6dTdPWkhpNGkzTjEyT2p0bzRZelE1c0xsLXBrOGVKX3hVdW5WRFQxZzE1czhXcmtpWGZmQUtrbS1BOGVjaENHVmhBdFEzMThkUlplTnhSSVpkUnh5VUdyVkVhbnduTnJpazhPUExzckV6N2FMNEVFRjY0bnZkLThhZXVLa0R2VTN0MXhLRk1nQkxEcFhrUGtEVTR0WW9zZEp6b3pQLW5DWWJVQng2Tm1RNjY4bmNXcVhWbUZVV09YV3haeDNSOUoxRjlFTFIySllHMG1Fek9MZVIta3NjaUk0ZC1QUE1Sck8tVld5MUJfNDBIQnJXU3BKWHNnM0ZrdDNkRkZPWnlrNjRPM3F6ZHJaN1FxYWVkUlJMek1JVnJpTDRZbkltNG5Uei1La3Fyakt2QVlSYXhNWVd4WjdNUWNnd0lMU3NSYURISTlDSlUyZkRMSzc1R09MQkhRMEswb1NLajFCczAtYWtYckhtTXotaGVDMXUtNUFYN2NUdk5Ob0QxU2w1bFl0OTQ4ZjFPbGZ1ZWVfel94ZDEtc3FfODBTN01maWFDX2tqMXZaWGtQdkhaNVlsSmptN3U1UU44cEZuT1gxZy1JdDdnTW1pZnlSMU1nb1FaaGhCRlJOb3dSUHJISkhJVV9xSTZZanBLcE9YQ191eXB3aUpyZjFNUUN2N3BEOGdsTjBkZ1NWRU1zUTgzeG9PNnZ0QzJVTmR6ZjVvaF8zY3pBaDF2NnZaSklMaVBfSlpLb2o2SHBOWUhxS24zQllIR0Z5NU5zMWE2U2Vsb19Eb2Y2X3F3MXRaSW5FbkZGbkZzclFheHRtS3FEa3d2YTN5NmRuWG9oUWhQZDV3b1RtakV1ZHdHSDN3bjZtVHVmNS1jZWhCeElMQWNERWM2d0RyMTVDaGExVDg3aEZiUFFtQWlDMGYxSXBKWm5DVTBzUEY2NTM5WVkxQ2RwaDVDTGRZZXRMZE16LUhwVWdvSG5hOW1qRUpYQmlENlVvekJSZXlhZEYxSzgyNi1vVGswa1piU3VjRHpyWEhUSDBGMENVRkF2ZGlQSHNoTTgxM3RiTGxXajZXTHUwbXlYRGQ0TzY1eHkxQjZBSGZCanpxczFSaU5yWFZEUzlaaXl4MDNOX1M0LXhxaWFlaTRHWUN1TjBBSDYtMnViSURZbXZXaGZSQTRIT2JBVU5CeURDcm5rUnRoNDhFZjZhOXJrbDF4UE5KanRXLUk3RjdnUE5YRG1KaHFwRF9pRDc5TlBjdzdIa2xQWHRIZUFnSGNIWGNSV2NHNjhUOHAta1FSX055M0RCV1VKYTVWalBwLUFETmR5M3J1dlI4RzhNM0h2VlJhTzFnVHUyeGQ1Zjd5aTVCVUZ4aXZYUUo0RV9LMzVnM3c5NS1ucWRzMk9LWkQ4OGlNS29oQUtpU3BPVzNRaEJENVZVM3pFQTh2UEowalgzejZ0VC14VHpCYWltWlI2SGRBVHZNd1UzbGh6Y2kyZlJOcmtpZkNMenh1eFBMa0gteEV5MkxCbzdLY3I2Rjh1SWxBakJZZW9EdGZTaHlIeE9sbkxEdEs5a1FvLV9yakRyRzdBanZnMGJJdXVFY0RxWnA3M082YWNlSEU1bnRlUjkzN19fZzZiWkVFVVN5UERZNENyQWh2N2RBWEE0N1NwUkdlREoxTTJ2OEdiWVpLNTJQbUhUQ0pBb0p5ODNqQVM0SjRVcm9UdE5iaXI5WU9ucmVGZzNkZXRGTFVqS1NybW02eGJiZEtzTzhUT1pabktLMDFRaHBhN2VsTWtVbFU3VXE3NFZsN2RGXzdwbjFkS00wQzd0eFptb1FkUV9JRlR1MkUxVVg5YjhxZHFhd0U2eFBJQTJ3T2l6a3pZamFXd09Lc3d0TTdSX2dua09ucmo0ZTZhb2tPQ3pwSlFmNEdjSkJSZ0RfVWJmLThoeGpDQVVXYU1vbkYwaEExX21vb3NRLVFnbGhFS1FNSS1XWHhBemVXLTNPQUF2bmdCTDc0ZXEzd1FPMzloNklnajJadU9vRm8yNGgtRzJPaXBYeWNNQXVDUHpOUlotZ011aHRkOHhJamk2LXBaeF9UMDNhX0JNRUNTTmRrQjN6WTBhQVBlaVp1aktwbkhya0Z5VTFBQlpLYzRQaEI0SUtnQ2FmdEV3ZWJQM19VTGt0N2I3cVF3Wkc5TFpRMWxNQUVHOW9YeWc5SDVaNjVfekxtZ1hzNEhfblpjcTdGT3hVVzM4WFl3WmpRbE1GVUc1a244STlIZmZQYktNVHNoV0dNbnM4b0ZoeWcyb3FHWGpfeXZray14NUxxY0pTTW1PUzRBejFrdjI5OHpBSWFPc1I2SXc3Nlh6SnpiREFlSjBFb3pYel9ZU3lpemY0QVRPQ2FuVUE3SmRCRUFJel9XakZHVG9XaGd2YTQ0bnNtOS1LblltRHN1MzRFMFU4TXdaRXhuS3loblFiNEljZHRNTUltZ2RnTjVjZ3dJVmFlOHhjWWRIWkN5Y05PY0RKbmJPWkdxaWFWMG5zcDVlWnc5WDUtbHNFaEpZUjB1T19zZV9teDRSR1lMWWtHZjl5dms1c0ZSMGoxR0VjejB2bW1fOWNyWFV4VEt2QTRSMEFzTHYzRWwwVXhrSmNhemFrMGlXT0hrcmxaRy1BcWRrNjFtNGppUT0=)
                CM_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmhKMUFYNHI2M3BGVFVPdmd3aHM5MGxDUnM0UGl4b3BJbFdvTDRPUTdwa0tiUXMzWVRoZExzSGd6cW5PZGxjdFFjcENVVG1namVDQUFDV1dfdUlTd3pjdGIxM1E9PQ==)
                CM_PROVISIONING_PROFILE: Encrypted()
            node: latest
            xcode: 12.5
            cocoapods: default
        triggering:
            events:
                - push
                - tag
                - pull_request
            branch_patterns:
                - pattern: develop
                  include: true
                  source: true
        scripts:
            - name: Install npm dependencies
              script: |
                npm install
            - name: Install CocoaPods dependencies
              script: |
                cd ios && pod install
            - name: Set up keychain to be used for codesigning using Codemagic CLI 'keychain' command
              script: |
                keychain initialize
            #- name: Fetch signing files
            #  script: |
            #    # For information about Codemagic CLI commands visit: https://github.com/codemagic-ci-cd/cli-tools/blob/master/docs/app-store-connect/README.md
            #    # For details about the --type paramater below - https://github.com/codemagic-ci-cd/cli-tools/blob/master/docs/app-store-connect/fetch-signing-files.md#--typeios_app_adhoc--ios_app_development--ios_app_inhouse--ios_app_store--mac_app_development--mac_app_direct--mac_app_store--mac_catalyst_app_development--mac_catalyst_app_direct--mac_catalyst_app_store--tvos_app_adhoc--tvos_app_development--tvos_app_inhouse--tvos_app_store
            #    app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
            - name: set up provisioning profiles
              script: |
                 PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
                 mkdir -p "$PROFILES_HOME"
                 PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
                 echo ${CM_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
                 echo "Saved provisioning profile $PROFILE_PATH"   
                 
            - name: Add signing certificate to keychain
              script: |
                 echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
                 keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD                   
            #- name: Use system default keychain
            #  script: |
            #    keychain add-certificates
            - name: Increment build number
              script: |
                #!/bin/sh
                set -e
                set -x
                cd $FCI_BUILD_DIR/ios
                # agvtool new-version -all $(($BUILD_NUMBER + 1))
                agvtool new-version -all $(($(app-store-connect get-latest-testflight-build-number "$APP_STORE_APP_ID") + 1))
            - name: Set up code signing settings on Xcode project
              script: |
                xcode-project use-profiles
            - name: Build ipa for distribution
              script: |
                xcode-project build-ipa --workspace "$XCODE_WORKSPACE"  
        artifacts:
            - build/ios/ipa/*.ipa
            - /tmp/xcodebuild_logs/*.log
            - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
            - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
        #publishing:
          # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
        #  email:
        #    recipients:
        #      - user_1@example.com
        #      - user_2@example.com
        #    notify:
        #      success: true     # To not receive a notification when a build succeeds
        #      failure: false    # To not receive a notification when a build fails
        #  slack: 
        #    # See the following link about how to connect your Slack account - https://docs.codemagic.io/publishing-yaml/distribution/#slack
        #    channel: '#channel-name'
        #    notify_on_build_start: true   # To receive a notification when a build starts
        #    notify:
        #      success: true               # To not receive a notification when a build succeeds
        #      failure: false              # To not receive a notification when a build fails
        #  app_store_connect:                 
        #      apple_id: $APPLE_ID
        #      password: $APP_SPECIFIC_PASSWORD
    
